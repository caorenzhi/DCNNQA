#!/usr/bin/env perl
use warnings;
use strict;
use POSIX;
# input
my $f_pdb = $ARGV[0];
my $f_ss = $ARGV[1];
# output
my $f_out = $ARGV[2];


my $dir_work = $ARGV[3];
my $f_u2 = "$dir_work/potentials/CSP/parse_stride.pl";
require "$f_u2";

################################
# global configuration values
my @aminos = ("ASP","PRO","LYS","ILE","TRP","CYS","GLY","PHE","GLN","SER","ASN","LEU","VAL","TYR","GLU","ARG","THR","ALA","MET","HIS");
my $RT = 0.582;
my $sigma = 0.02;
my $penalty = 0;
my $aid = 2;
my $interval = 3.0;
my $num_classes = $interval / 0.1;

#####################################
# reference state information
my $refer = get_refer();
my %refer_sum;
my $Ma_sum = 0;
for my $key (keys %{$refer}){
  my $tmp_sum = 0;
  for(my $i=0; $i<@{$refer->{$key}}; $i++){
    $tmp_sum += $refer->{$key}->[$i];
  }
  $refer_sum{$key} = $tmp_sum;
  $Ma_sum += $tmp_sum;
}

my %ss;
if(! -e $f_ss || -z $f_ss){ die "Error, calculating CSP, no stride file."; }
parse_stride($f_ss, \%ss);

open OUT, ">$f_out";
my %coords;
get_coords($f_pdb, $aid, \%coords);
my $N = keys %coords;
if($N == 0){
  close OUT;
  exit;
}

my ($com_x, $com_y, $com_z) = center_of_mass(\%coords);
my $Rg = 0.395*($N**0.6) + 7.257;

my $dist_max = $Rg * $interval;
my $asp_sum = 0;
for my $k1 (sort {$a<=>$b} keys %coords){
      my $num_atoms = 0;
      my $dist = sqrt(($coords{$k1}->[0]-$com_x)**2 + ($coords{$k1}->[1]-$com_y)**2 + ($coords{$k1}->[2]-$com_z)**2);
      if($dist > $dist_max){ next; }
      my $amino = $coords{$k1}->[3];
      if($amino eq 'GLY'&& $aid == 2){ next; } 

      my $class = get_class($Rg, $interval, $dist);
      if($class == 0){ next; }

      my $amino_ss;
      if(exists $ss{$coords{$k1}->[4]}){
          $amino_ss = $ss{$coords{$k1}->[4]};
      }else{
          next;
      }
      my $add = 0;
      if($amino_ss eq 'C'){ $add = 0; }
      if($amino_ss eq 'E'){ $add = 1; }
      if($amino_ss eq 'H'){ $add = 2; }

      my $asp = $penalty;
      if($class == 0){  
        $asp_sum += $penalty;
      }else{

        my $key_refer = $add*$num_classes + $class - 1;
        my $ma = $refer_sum{$amino};
        if($ma == 0){ next; }

        my $f_observed_a = $refer->{$amino}->[$key_refer] / $ma;
        my $f_reference;
        my $ma_sum = 0;
        for my $k3 (keys %{$refer}){
          $ma_sum += $refer->{$k3}->[$key_refer];
        }
        $f_reference = $ma_sum/$Ma_sum;
        
        #if($f_reference){
        if($f_observed_a && $f_reference){
          $asp = ($RT*log(1+$ma*$sigma)) - ($RT*log(1+($ma*$sigma*($f_observed_a/$f_reference))));
          $asp_sum += $asp;
        }else{
          $asp_sum += $penalty;
        }
      }
      print OUT "$k1\t$amino\t$asp\n";
}
close OUT;

sub center_of_mass{
  my $mat = shift;
  my ($Rx, $Ry, $Rz);
  $Rx = $Ry = $Rz = 0;
  my $n = keys %{$mat};
  for my $key (keys %{$mat}){
    $Rx += $mat->{$key}->[0];
    $Ry += $mat->{$key}->[1];
    $Rz += $mat->{$key}->[2];
  }
  $Rx /= $n;
  $Ry /= $n;
  $Rz /= $n;
  return($Rx, $Ry, $Rz);
}

sub get_class{
  my ($Rg, $interval, $dist) = @_;
  my $range = $interval * $Rg;
  my $range_add = 0.1*$Rg;
  my $class = 0;
  my $n = 0;
  for(my $i=0; $i<$range; $i+=$range_add){
    my $j = $i + $range_add;
    $n++;
    #print "$i $j\n";
    if($j >= $range){
      if($dist >= $i && $dist <= $j){ $class = $n; }
    }else{
      if($dist >= $i && $dist < $j){ $class = $n; }
    }
  }

  return $class;
}


sub get_coords{
  my ($f_pdb, $aid, $coords) = @_;
  # aid = 1, CA
  # aid = 2, CB
  my $atomID;
  if($aid == 1){ $atomID = "CA"; }
  if($aid == 2){ $atomID = "CB"; }
  open IN, "$f_pdb" or die $!;
  my $cid = 0;
  while(my $line = <IN>){
    chomp $line;
    if(substr($line, 0, 6) eq 'ATOM  '){
      my $atom_name = substr($line,12,4);
      $atom_name =~ s/^\s+//; $atom_name =~ s/\s+$//;
      if($atom_name eq $atomID){
        my ($id1, $id2, $x, $y, $z);
        $id1 = substr($line, 6, 5);
        $id2 = substr($line, 22, 4);
        $x = substr($line, 30, 8);
        $y = substr($line, 38, 8);
        $z = substr($line, 46, 8);
        my $residue = substr($line, 17, 3);
        $id1 =~ s/^\s+//; $id1 =~ s/\s+$//;
        $id2 =~ s/^\s+//; $id2 =~ s/\s+$//;
        $x =~ s/^\s+//; $x =~ s/\s+$//;
        $y =~ s/^\s+//; $y =~ s/\s+$//;
        $z =~ s/^\s+//; $z =~ s/\s+$//;
        if($residue ~~ @aminos){
          $cid++;
          push(@{$coords->{$cid}}, $x);
          push(@{$coords->{$cid}}, $y);
          push(@{$coords->{$cid}}, $z);
          push(@{$coords->{$cid}}, $residue);
          push(@{$coords->{$cid}}, $id2);
        }
      }
    }
  }
  close IN;
}

sub get_refer{
  my %refers;
  my @arr1 = qw(24 131 443 880 1380 2069 2992 3944 4703 5273 5143 4814 4184 3194 2345 1548 964 617 409 261 179 124 105 71 44 34 26 21 14 14 28 226 727 1388 2188 2992 3465 3573 3362 2878 2309 1720 1138 732 447 263 189 93 69 56 28 20 13 10 7 8 4 9 3 1 21 268 795 1586 2934 4635 6858 8573 10060 10631 10103 8795 6788 4858 3174 1921 1098 638 420 277 187 158 84 80 55 38 35 22 16 15);
  my @arr2 = qw(7 52 117 338 543 907 1513 2298 3381 4085 4272 3980 3525 2523 1674 1050 675 444 288 181 129 68 72 49 43 26 14 8 11 5 11 73 203 384 628 1070 1742 2411 2790 2817 2535 2020 1395 980 613 354 216 110 86 60 31 17 14 6 6 4 3 1 1 1 5 68 190 445 781 1274 2168 3655 5014 6051 6568 5856 4400 2874 1870 1143 698 387 250 150 119 80 41 35 23 14 21 14 12 8);
  my @arr3 = qw(11 147 242 561 868 1353 1839 2893 3840 4811 5512 5501 4895 3831 2566 1815 1100 747 439 239 190 133 87 56 47 23 27 15 14 6 11 129 293 540 679 835 1156 1341 1401 1426 1269 1034 802 568 340 221 114 92 49 35 18 13 11 8 3 7 1 2 1 0 12 86 198 409 646 1020 1450 2057 2615 3212 3367 2989 2318 1554 1077 652 365 214 129 89 60 44 42 26 14 17 15 12 9 11);
  my @arr4 = qw(25 131 390 657 944 1422 2275 3330 4761 6367 7816 7984 7147 5703 3910 2655 1622 1007 594 372 252 158 121 92 75 47 29 24 13 8 7 104 417 669 661 864 1163 1503 1798 1859 1748 1487 1071 688 460 289 158 89 66 41 40 16 8 7 7 4 3 2 5 3 7 84 222 379 725 1048 1566 2317 3491 4510 5195 5324 4409 2999 1979 1151 667 392 277 170 115 69 61 46 23 24 11 16 7 14);
  my @arr5 = qw(13 50 134 276 450 614 812 1008 1092 1126 1058 803 579 397 247 155 95 60 37 29 26 16 8 8 8 3 2 1 1 0 11 79 239 489 756 814 987 1020 836 700 571 435 244 170 101 56 37 18 21 14 7 10 3 2 3 2 0 0 0 0 11 56 145 317 532 733 887 1041 1127 931 756 490 310 212 109 64 30 32 10 11 7 5 4 3 0 3 0 0 0 0);
  my @arr6 = qw(11 44 100 224 372 615 982 1389 1858 2585 3001 3037 2629 2088 1394 939 571 376 234 122 123 69 51 34 22 16 18 7 7 8 5 65 173 293 535 791 1042 1299 1588 1597 1373 1229 891 619 467 250 160 102 57 36 30 18 9 8 5 3 4 3 0 1 10 60 174 281 651 1031 1583 2455 3368 4492 5030 4700 3583 2551 1651 1027 670 342 216 135 108 60 54 33 30 26 21 13 14 13);
  my @arr7 = qw(7 55 205 334 547 806 1210 1797 2858 3964 4973 5426 5108 4014 3106 2022 1276 805 506 318 211 135 103 65 55 40 22 11 14 10 10 94 352 531 743 1109 1501 1922 2412 2670 2583 2268 1728 1227 816 495 275 182 105 76 51 28 15 11 5 2 5 0 1 1 9 82 278 500 841 1438 2296 3653 5515 7707 9625 10025 8616 6234 4030 2529 1513 850 531 333 247 142 115 82 58 63 43 31 25 13);
  my @arr8 = qw(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0);
  my @arr9 = qw(13 105 303 473 667 925 1163 1459 1824 2117 2160 1892 1681 1228 880 571 383 252 171 111 89 58 41 35 23 12 12 8 7 6 19 93 276 481 666 917 1227 1264 1252 1215 994 725 512 323 204 121 64 33 18 23 11 5 6 5 3 1 5 0 2 0 15 44 222 394 612 851 1265 1618 1881 2025 1907 1607 1190 781 474 286 190 107 65 49 39 13 19 11 9 4 4 5 1 4);
  my @arr10 = qw(8 61 191 392 775 1267 2056 2712 3179 3237 2918 2454 1758 1211 797 489 349 226 144 96 71 49 39 29 22 19 9 8 9 2 44 427 1197 2338 3648 4692 5511 5569 5349 4415 3374 2472 1572 1000 605 398 198 126 77 57 36 24 12 13 5 7 1 2 3 2 14 152 479 1044 1846 2784 3912 5298 5808 5466 4353 3274 2175 1359 857 520 297 212 127 90 79 54 33 28 24 20 14 7 10 16);
  my @arr11 = qw(7 97 269 654 1263 2158 3308 4385 5322 5884 5338 4382 3231 2180 1476 970 567 383 263 201 123 97 66 50 37 14 22 14 11 11 68 396 1171 2327 3674 4923 5820 5864 5501 4911 3766 2599 1735 1043 650 347 223 147 111 65 40 19 16 15 9 14 5 4 2 0 19 233 799 1848 3305 5430 7974 10291 11766 11549 10020 7306 4858 3065 1849 1105 667 484 294 214 128 107 78 67 38 40 24 18 23 22);
  my @arr12 = qw(4 46 114 187 322 584 971 1718 2917 4330 5371 5751 5298 4107 2720 1927 1197 726 446 290 206 136 100 63 51 30 24 20 13 13 12 70 130 257 451 777 1301 1891 2487 2847 2759 2322 1738 1223 824 517 281 152 119 82 44 20 19 12 8 7 7 1 2 5 9 35 158 334 569 859 1528 2881 4299 6182 7464 7016 5672 4197 2621 1647 903 550 362 207 143 112 55 83 37 39 32 17 13 14);
  my @arr13 = qw(11 23 102 188 337 492 757 884 1068 1139 1078 993 700 540 438 274 167 132 82 58 37 21 20 17 9 8 12 4 2 7 13 75 218 400 751 942 1048 1084 936 771 598 486 307 187 115 77 49 25 16 12 10 3 5 4 3 1 0 2 0 0 6 52 184 416 744 1099 1588 2008 2151 2009 1644 1247 781 505 282 186 125 56 39 33 25 22 8 11 8 2 5 5 3 2);
  my @arr14 = qw(12 67 185 444 830 1318 1893 2550 2974 2984 2572 2079 1491 1008 636 405 289 155 122 69 73 56 43 14 14 12 4 4 5 2 29 243 667 1330 2070 2787 3363 3400 3076 2532 1975 1302 868 527 335 209 112 89 51 32 21 17 7 11 1 2 1 2 2 0 12 99 303 734 1373 2153 2782 3802 4219 3771 3191 2275 1494 916 559 305 225 159 85 57 28 39 18 18 14 4 6 7 6 2);
  my @arr15 = qw(7 100 284 618 1155 1995 3145 4512 5719 6881 7436 7274 6396 4885 3583 2173 1389 796 485 301 244 148 130 80 63 33 16 22 12 9 6 35 136 246 394 570 827 932 1061 1134 1095 827 646 449 291 183 101 62 31 26 17 15 9 2 4 2 0 2 0 0 7 72 137 235 471 702 945 1205 1709 2030 2327 2182 1884 1371 917 572 314 192 109 59 41 33 23 17 8 10 4 2 1 1);
  my @arr16 = qw(33 139 438 819 1500 2150 2797 3537 4705 5639 6174 6319 5610 4462 3265 2084 1304 887 560 359 278 178 131 113 58 52 34 29 16 7 20 174 498 968 1376 1966 2365 2587 2857 2696 2397 1955 1368 918 635 421 231 147 102 46 29 46 20 16 7 0 4 6 4 1 21 187 461 835 1461 2024 2553 3237 4031 4499 4528 4237 3318 2478 1510 967 608 363 246 129 95 71 52 28 29 10 29 12 13 11);
  my @arr17 = qw(21 136 323 620 1071 1762 2501 3140 3888 4770 5260 5231 4462 3487 2506 1626 958 570 348 281 180 118 98 65 47 30 29 20 12 13 12 181 502 1012 1464 2078 2816 3262 3621 3481 3030 2661 2027 1281 905 496 301 194 134 70 60 40 27 16 17 7 7 5 3 1 27 153 355 733 1281 1829 2496 3034 3502 3688 3466 3156 2274 1504 1056 591 380 234 137 101 83 48 31 25 17 15 12 10 9 3);
  my @arr18 = qw(2 29 76 156 326 535 751 915 1055 1115 927 726 508 342 238 170 87 71 42 39 16 23 18 6 7 2 2 0 2 1 12 63 184 345 615 809 954 1090 1026 922 749 486 335 206 115 71 45 51 26 12 6 4 5 3 6 1 2 2 1 0 3 27 107 187 424 763 1044 1349 1490 1560 1251 964 632 383 178 127 76 50 31 21 16 10 8 10 2 2 5 2 2 2);
  my @arr19 = qw(3 45 168 336 654 1000 1537 2190 2794 2855 2585 1907 1501 985 673 448 286 149 111 77 57 46 21 25 13 11 8 6 4 3 12 105 366 773 1511 1971 2604 2970 2838 2548 2022 1371 939 629 393 199 140 78 65 49 29 12 19 9 7 5 4 4 2 1 11 63 218 481 964 1522 2251 3127 3731 3410 2965 2124 1380 918 547 331 207 141 82 44 34 35 14 20 10 10 7 3 3 1);
  my @arr20 = qw(16 97 227 555 951 1625 2587 3315 4049 4248 3947 3253 2485 1803 1180 762 522 364 236 160 118 67 60 47 23 18 20 13 10 7 59 488 1351 2750 4354 5829 7341 7769 7612 6726 5239 3935 2543 1580 950 586 392 210 154 97 61 52 26 13 19 4 3 3 5 3 24 149 480 1023 1881 2924 4339 5454 6002 5744 5082 3498 2402 1584 886 570 337 206 150 88 71 56 36 30 21 13 16 6 7 8);
  $refers{"ALA"} = \@arr1; $refers{"ARG"} = \@arr2; $refers{"ASN"} = \@arr3; $refers{"ASP"} = \@arr4; $refers{"CYS"} = \@arr5;
  $refers{"GLN"} = \@arr6; $refers{"GLU"} = \@arr7; $refers{"GLY"} = \@arr8; $refers{"HIS"} = \@arr9; $refers{"ILE"} = \@arr10;
  $refers{"LEU"} = \@arr11; $refers{"LYS"} = \@arr12; $refers{"MET"} = \@arr13; $refers{"PHE"} = \@arr14; $refers{"PRO"} = \@arr15;
  $refers{"SER"} = \@arr16; $refers{"THR"} = \@arr17; $refers{"TRP"} = \@arr18; $refers{"TYR"} = \@arr19; $refers{"VAL"} = \@arr20;
  return \%refers;
}

