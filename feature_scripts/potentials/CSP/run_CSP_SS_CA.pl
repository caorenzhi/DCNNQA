#!/usr/bin/env perl
use warnings;
use strict;
use POSIX;
# input
my $f_pdb = $ARGV[0];
my $f_ss = $ARGV[1];
# output
my $f_out = $ARGV[2];

my $dir_work = $ARGV[3];
my $f_u2 = "$dir_work/potentials/CSP/parse_stride.pl";
require "$f_u2";

################################
# global configuration values
my @aminos = ("ASP","PRO","LYS","ILE","TRP","CYS","GLY","PHE","GLN","SER","ASN","LEU","VAL","TYR","GLU","ARG","THR","ALA","MET","HIS");
my $RT = 0.582;
my $sigma = 0.02;
my $penalty = 0;
my $aid = 1;
my $interval = 3.0;
my $num_classes = $interval / 0.1;

#####################################
# reference state information
my $refer = get_refer();
my %refer_sum;
my $Ma_sum = 0;
for my $key (keys %{$refer}){
  my $tmp_sum = 0;
  for(my $i=0; $i<@{$refer->{$key}}; $i++){
    $tmp_sum += $refer->{$key}->[$i];
  }
  $refer_sum{$key} = $tmp_sum;
  $Ma_sum += $tmp_sum;
}

my %ss;
if(! -e $f_ss || -z $f_ss){ die "Error, calculating CSP, no stride file."; }
parse_stride($f_ss, \%ss);

open OUT, ">$f_out";
my %coords;
get_coords($f_pdb, $aid, \%coords);
my $N = keys %coords;
if($N == 0){
  close OUT;
  exit;
}


my ($com_x, $com_y, $com_z) = center_of_mass(\%coords);
my $Rg = 0.395*($N**0.6) + 7.257;

my $dist_max = $Rg * $interval;
my $asp_sum = 0;
for my $k1 (sort {$a<=>$b} keys %coords){
      my $num_atoms = 0;
      my $dist = sqrt(($coords{$k1}->[0]-$com_x)**2 + ($coords{$k1}->[1]-$com_y)**2 + ($coords{$k1}->[2]-$com_z)**2);
      if($dist > $dist_max){ next; }
      my $amino = $coords{$k1}->[3];
      if($amino eq 'GLY'&& $aid == 2){ next; } 

      my $class = get_class($Rg, $interval, $dist);
      if($class == 0){ next; }

      my $amino_ss;
      if(exists $ss{$coords{$k1}->[4]}){
          $amino_ss = $ss{$coords{$k1}->[4]};
      }else{
          next;
      }
      my $add = 0;
      if($amino_ss eq 'C'){ $add = 0; }
      if($amino_ss eq 'E'){ $add = 1; }
      if($amino_ss eq 'H'){ $add = 2; }

      my $asp = $penalty;
      if($class == 0){  
        $asp_sum += $penalty;
      }else{

        my $key_refer = $add*$num_classes + $class - 1;
        my $ma = $refer_sum{$amino};
        if($ma == 0){ next; }

        my $f_observed_a = $refer->{$amino}->[$key_refer] / $ma;
        my $f_reference;
        my $ma_sum = 0;
        for my $k3 (keys %{$refer}){
          $ma_sum += $refer->{$k3}->[$key_refer];
        }
        $f_reference = $ma_sum/$Ma_sum;
        
        #if($f_reference){
        if($f_observed_a && $f_reference){
          $asp = ($RT*log(1+$ma*$sigma)) - ($RT*log(1+($ma*$sigma*($f_observed_a/$f_reference))));
          $asp_sum += $asp;
        }else{
          $asp_sum += $penalty;
        }
      }
      print OUT "$k1\t$amino\t$asp\n";
}
close OUT;

sub center_of_mass{
  my $mat = shift;
  my ($Rx, $Ry, $Rz);
  $Rx = $Ry = $Rz = 0;
  my $n = keys %{$mat};
  for my $key (keys %{$mat}){
    $Rx += $mat->{$key}->[0];
    $Ry += $mat->{$key}->[1];
    $Rz += $mat->{$key}->[2];
  }
  $Rx /= $n;
  $Ry /= $n;
  $Rz /= $n;
  return($Rx, $Ry, $Rz);
}

sub get_class{
  my ($Rg, $interval, $dist) = @_;
  my $range = $interval * $Rg;
  my $range_add = 0.1*$Rg;
  my $class = 0;
  my $n = 0;
  for(my $i=0; $i<$range; $i+=$range_add){
    my $j = $i + $range_add;
    $n++;
    #print "$i $j\n";
    if($j >= $range){
      if($dist >= $i && $dist <= $j){ $class = $n; }
    }else{
      if($dist >= $i && $dist < $j){ $class = $n; }
    }
  }

  return $class;
}


sub get_coords{
  my ($f_pdb, $aid, $coords) = @_;
  # aid = 1, CA
  # aid = 2, CB
  my $atomID;
  if($aid == 1){ $atomID = "CA"; }
  if($aid == 2){ $atomID = "CB"; }
  open IN, "$f_pdb" or die $!;
  my $cid = 0;
  while(my $line = <IN>){
    chomp $line;
    if(substr($line, 0, 6) eq 'ATOM  '){
      my $atom_name = substr($line,12,4);
      $atom_name =~ s/^\s+//; $atom_name =~ s/\s+$//;
      if($atom_name eq $atomID){
        my ($id1, $id2, $x, $y, $z);
        $id1 = substr($line, 6, 5);
        $id2 = substr($line, 22, 4);
        $x = substr($line, 30, 8);
        $y = substr($line, 38, 8);
        $z = substr($line, 46, 8);
        my $residue = substr($line, 17, 3);
        $id1 =~ s/^\s+//; $id1 =~ s/\s+$//;
        $id2 =~ s/^\s+//; $id2 =~ s/\s+$//;
        $x =~ s/^\s+//; $x =~ s/\s+$//;
        $y =~ s/^\s+//; $y =~ s/\s+$//;
        $z =~ s/^\s+//; $z =~ s/\s+$//;
        if($residue ~~ @aminos){
          $cid++;
          push(@{$coords->{$cid}}, $x);
          push(@{$coords->{$cid}}, $y);
          push(@{$coords->{$cid}}, $z);
          push(@{$coords->{$cid}}, $residue);
          push(@{$coords->{$cid}}, $id2);
        }
      }
    }
  }
  close IN;
}

sub get_refer{
  my %refers;
  my @arr1 = qw(19 158 487 921 1507 2221 3125 4257 5244 5663 5558 4939 3911 2763 1869 1152 738 459 299 190 151 109 79 45 34 32 18 17 13 12 27 255 760 1521 2544 3184 3587 3649 3492 2797 2140 1527 930 617 322 220 118 72 64 38 32 11 9 7 11 5 6 3 0 2 25 271 785 1712 3010 4902 6984 9393 11265 11702 10559 8363 5971 3975 2412 1414 787 490 336 200 165 118 71 74 37 41 27 13 17 20);
  my @arr2 = qw(7 58 132 342 655 1025 1885 2713 3914 4448 4426 3818 3069 2059 1318 757 538 325 213 147 81 77 57 43 31 12 8 10 9 2 8 71 216 478 757 1420 2201 2771 2901 2747 2295 1734 1085 742 431 251 119 93 66 44 14 14 5 9 3 2 1 1 0 1 2 63 208 512 871 1518 2649 4242 5883 6724 6527 5211 3564 2326 1446 870 486 298 180 131 93 61 33 22 24 12 16 12 13 10);
  my @arr3 = qw(23 136 264 618 978 1556 2270 3428 4558 5714 5965 5379 4276 2949 2107 1242 824 485 286 204 145 96 67 43 28 24 18 16 5 6 8 124 350 558 776 1030 1314 1530 1481 1402 1198 890 625 414 257 139 94 59 38 24 13 9 7 8 3 3 1 1 0 1 12 72 230 378 758 1173 1642 2398 3030 3487 3364 2841 1905 1235 839 454 275 154 113 55 53 44 32 20 15 12 15 12 14 8);
  my @arr4 = qw(19 143 424 756 1107 1631 2761 4196 5948 7698 8504 7877 6309 4487 3041 1856 1148 670 398 268 169 130 105 72 45 43 24 10 6 14 12 137 354 717 819 1061 1368 1821 1905 1944 1641 1255 768 560 324 186 102 75 46 36 22 10 8 8 2 3 4 5 2 1 5 92 243 383 830 1265 1840 2897 4040 5449 5793 4921 3543 2352 1350 790 477 286 195 129 76 73 48 33 20 13 10 14 13 11);
  my @arr5 = qw(12 47 146 291 465 652 769 1038 1088 1140 1033 833 554 363 227 138 79 57 33 24 20 14 8 8 6 2 1 1 1 2 14 80 232 569 772 862 1060 1004 857 616 541 368 233 124 95 42 28 21 14 8 9 6 1 2 5 0 0 0 0 0 6 69 148 301 506 700 955 1041 1175 975 736 465 273 185 88 56 33 26 10 10 4 4 4 2 1 2 0 0 0 0);
  my @arr6 = qw(15 37 121 250 432 680 1167 1641 2304 2939 3280 2912 2352 1687 1110 698 407 250 165 121 73 62 47 21 19 15 8 10 5 7 7 55 165 356 653 909 1257 1510 1721 1510 1342 1064 692 531 323 182 117 66 47 26 22 8 10 4 3 4 3 0 1 0 8 53 167 340 649 1295 1811 2878 4089 5164 5130 4285 2990 1978 1275 818 431 254 159 124 82 52 45 32 23 21 15 20 10 11);
  my @arr7 = qw(6 65 193 370 628 928 1476 2319 3637 4853 5611 5531 4557 3361 2314 1488 903 529 361 215 167 116 66 64 28 29 16 9 12 12 7 106 309 639 916 1426 1821 2347 2631 2753 2447 1958 1362 953 555 335 192 124 73 64 29 18 9 8 5 0 1 2 0 3 6 94 282 578 881 1630 2818 4605 6920 9433 10556 9585 7186 4815 2933 1770 1037 578 401 294 154 125 89 63 60 48 40 25 19 9);
  my @arr8 = qw(49 374 792 1786 3119 4461 5655 7273 9172 11161 11694 10895 9005 6603 4485 2762 1691 995 623 461 296 227 150 107 73 36 42 23 23 16 54 272 735 1329 1935 2418 2887 2724 2672 2243 1722 1307 835 526 370 202 123 82 57 32 23 15 14 12 7 5 2 3 2 1 37 216 546 1092 1496 2226 2567 3060 3155 3053 2652 2067 1494 916 569 296 176 130 78 44 31 34 20 8 16 6 6 2 3 3);
  my @arr9 = qw(13 131 277 495 722 1030 1254 1600 2022 2219 2305 1928 1460 1063 707 453 329 194 125 98 76 42 38 32 16 9 11 9 3 4 12 119 287 535 745 1130 1248 1362 1250 1217 857 638 399 266 158 81 35 29 20 16 4 6 6 2 0 3 4 1 0 0 10 60 194 424 626 914 1352 1788 2060 2141 1845 1561 990 657 390 226 158 65 63 44 22 17 15 13 4 3 3 5 2 3);
  my @arr10 = qw(10 62 218 423 745 1311 2038 2654 3241 3273 3072 2506 1720 1158 715 470 307 188 114 92 71 38 31 25 19 12 13 5 7 6 59 427 1279 2507 3955 5046 5533 5755 5256 4266 3219 2185 1414 889 517 271 182 95 70 36 29 23 11 8 5 2 1 3 2 2 18 134 442 954 1824 2814 4043 5353 6204 5648 4428 3127 1956 1228 760 456 244 179 115 83 59 54 32 26 27 9 9 10 14 18);
  my @arr11 = qw(7 97 288 657 1296 2133 3221 4650 5407 6023 5377 4480 3197 2072 1409 784 521 339 247 154 113 89 48 43 27 17 16 15 9 8 62 428 1205 2557 4094 5280 5713 6093 5504 4811 3487 2426 1466 880 496 324 183 134 80 41 30 25 12 7 15 6 3 4 0 1 30 195 707 1771 3216 5498 8060 10458 12521 12175 9956 7076 4572 2767 1601 934 588 419 275 184 112 87 73 51 44 40 16 23 19 17);
  my @arr12 = qw(2 41 138 204 381 673 1311 2288 3873 5176 5970 5771 4583 3223 2220 1383 820 510 320 222 174 89 78 41 45 27 17 16 12 5 9 40 156 322 628 1036 1685 2291 2809 2897 2564 1951 1435 988 591 332 182 128 77 51 31 16 16 6 8 6 2 5 3 2 6 53 132 381 654 1070 2053 3462 5362 7252 7746 6414 4816 3274 2009 1209 664 433 248 152 123 82 73 42 42 25 31 14 10 15);
  my @arr13 = qw(9 39 104 180 346 514 767 916 1092 1153 1083 1003 688 528 379 252 139 107 67 41 33 20 19 12 12 8 5 4 3 8 16 74 233 464 744 1003 1051 1101 949 740 586 411 261 149 106 54 39 19 11 10 7 5 7 3 0 0 2 0 0 0 7 55 201 378 703 1112 1606 2111 2187 2059 1702 1149 679 458 231 160 101 42 32 28 25 14 15 4 6 4 4 6 0 2);
  my @arr14 = qw(6 70 212 492 821 1292 1899 2540 3026 3049 2738 2064 1480 899 612 363 242 159 89 67 69 44 26 9 16 10 2 5 3 1 48 246 752 1341 2261 2871 3486 3464 3037 2568 1762 1229 760 457 312 156 105 62 43 24 22 8 14 2 4 0 3 1 2 0 20 72 284 731 1318 2055 2902 3946 4287 3936 3269 2179 1434 852 477 320 167 147 71 40 36 25 16 21 10 5 8 5 4 1);
  my @arr15 = qw(10 83 362 703 1328 2257 3575 5243 6525 8033 8099 7305 5658 4091 2492 1585 849 515 332 253 165 139 87 68 36 21 24 10 8 8 5 50 146 300 453 712 922 1074 1178 1205 987 731 496 338 200 112 67 43 25 17 13 10 5 3 3 1 0 1 0 0 7 75 145 290 477 843 1065 1530 2068 2490 2496 2068 1526 986 643 344 200 112 57 54 30 26 14 8 12 4 1 2 1 1);
  my @arr16 = qw(41 141 469 933 1581 2361 3065 4158 5374 6334 6808 6245 5017 3731 2472 1546 965 618 410 305 184 147 119 68 46 38 28 19 11 16 34 167 526 1052 1615 2253 2602 2889 2911 2718 2134 1677 1100 717 445 269 177 116 60 29 42 26 12 8 4 6 5 2 1 1 32 153 438 940 1530 2117 2863 3538 4484 4902 4834 3828 2801 1873 1184 717 402 267 162 119 82 46 38 26 24 21 12 17 8 11);
  my @arr17 = qw(20 146 359 674 1240 1829 2808 3597 4578 5507 5612 5105 4058 2865 1898 1110 706 407 312 194 137 107 75 49 29 28 19 16 14 4 18 170 574 1110 1773 2549 3168 3609 3816 3453 2887 2320 1551 1020 585 352 224 132 89 68 37 32 22 14 8 8 6 0 3 4 24 160 361 794 1326 1934 2693 3311 3832 4016 3589 2832 1885 1230 868 441 290 161 123 85 70 35 23 19 17 18 7 8 9 4);
  my @arr18 = qw(1 28 74 182 325 552 775 917 1107 1128 965 688 483 336 202 146 86 57 39 20 24 24 6 6 6 1 0 1 2 2 11 60 181 385 639 927 1064 1054 1040 928 697 432 276 167 85 63 47 32 20 7 7 7 3 4 2 2 2 1 1 1 3 35 85 209 404 746 1102 1426 1581 1542 1287 921 560 341 168 107 64 42 21 17 15 8 8 6 6 2 2 2 1 3);
  my @arr19 = qw(5 51 157 382 638 1078 1614 2259 2863 2916 2598 1933 1403 941 585 369 241 131 85 69 59 26 18 22 11 12 2 4 6 2 14 98 372 878 1670 2241 2680 3031 2914 2535 1850 1162 862 538 295 175 106 79 57 33 17 16 14 8 4 5 4 2 1 0 8 70 202 515 923 1569 2320 3280 3865 3517 2908 2000 1374 782 490 311 166 110 69 43 30 20 22 16 10 8 5 5 0 3);
  my @arr20 = qw(23 95 248 548 1010 1676 2647 3296 4231 4406 4044 3327 2431 1599 1076 646 458 285 194 133 94 66 48 28 22 24 13 12 6 6 65 487 1440 2963 4851 6339 7582 8156 7628 6474 4953 3414 2195 1331 772 459 315 172 117 61 57 33 22 15 9 3 2 4 4 3 22 154 436 986 1889 3054 4467 5680 6404 6109 4904 3267 2182 1337 780 462 255 187 113 90 59 38 37 21 20 16 9 9 6 7);
  $refers{"ALA"} = \@arr1; $refers{"ARG"} = \@arr2; $refers{"ASN"} = \@arr3; $refers{"ASP"} = \@arr4; $refers{"CYS"} = \@arr5;
  $refers{"GLN"} = \@arr6; $refers{"GLU"} = \@arr7; $refers{"GLY"} = \@arr8; $refers{"HIS"} = \@arr9; $refers{"ILE"} = \@arr10;
  $refers{"LEU"} = \@arr11; $refers{"LYS"} = \@arr12; $refers{"MET"} = \@arr13; $refers{"PHE"} = \@arr14; $refers{"PRO"} = \@arr15;
  $refers{"SER"} = \@arr16; $refers{"THR"} = \@arr17; $refers{"TRP"} = \@arr18; $refers{"TYR"} = \@arr19; $refers{"VAL"} = \@arr20;
  return \%refers;
}

